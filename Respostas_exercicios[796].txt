Exercício 1
Sabendo que hoje o 1 dolar é equivalente a 5,36 reais.
Fazer um programa em c#, java ou em liguagem de algoritmo que dado um valor em dolar, exiba o equivalente em reais

Exemplo 1:
Entrada: 10
Saída: 53,60

Example 2:
Entrada: 58
Sáida: 310,88 

RESPOSTA: 


import java.util.Scanner;

import javax.swing.JOptionPane;

public class Exercicio {

	public static void main(String[] args) {
		
		// Sabendo que hoje o dolar é equivalente a 5,36 reais
		// Fazer um programa de algoritmo que dado um valor, exiba o equivalente em reais
		
				
		double real, dolar;
		String dado;
		dado = JOptionPane.showInputDialog( "Insira o valor em real: " );
		real = Double.parseDouble(dado);
		dolar = (5.36*(real));
		System.out.println("O valor em dolar $ é " + dolar);
		
		
		}
		
	}



Exercício 2
Fazer um programa em c#, java ou em liguagem de algoritmo que dado uma sequência numerica, exiba o número que apareceu mais vezes.
Se dois números aparecerem com a mesma quantidade exibir o que apareceu pela primeira vez por ultimo

Exemplo 1:
Entrada: 245431234
Saída: 4

Example 2:
Entrada: 123765423754838338788
Sáida: 3


RESPOSTA: 

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

import javax.swing.JOptionPane;

public class Exercicio2 {

	public static void main(String[] args) {
		// fazer um programa de algoritmo que dado uma sequencia numerica, exiba o numero que apareceu mais vezes
		// Se dois numeros aparecem com a mesma quantidade exibir o que apareceu pela primeira vez por ultimo
		// 245431234
		
		int indice = 0;
		int maiorrepeticao = 0;
		double numeromaisrepetido = 0;
		boolean ultimonumero = false;
		
		double [] numeros = new double[9];
		numeros[0] = 2;
		numeros[1] = 4;
		numeros[2] = 5;
		numeros[3] = 4;
		numeros[4] = 3;
		numeros[5] = 1;
		numeros[6] = 2;
		numeros[7] = 3;
		numeros[8] = 4;
		
		while(!ultimonumero ) {
			int contador = 0; 
			
			for (double numero : numeros) {
				
				if(numero == numeros[indice])
					contador++;
				
				if(contador > maiorrepeticao) {
					maiorrepeticao = contador;
					numeromaisrepetido = numeros[indice];
				}
				
			}
			
			if(indice < (numeros.length-1)) {
				indice++;
				
			} else {
				ultimonumero = true;
			}
			
		}
			
		
		System.out.println("Maior número: " + numeromaisrepetido);
		
		
		
		
		
		}
			
	}



Exercício 3

Fazer um programa em c#, java ou em liguagem de algoritmo para:
Uma lanchonete possui os seguintes produtos lanche de carne (R$20) ou de frango (R$16), batata frita (R$6) e refrigerante (R$4).
Os lanches podem ou não vir com salada. Acréscimo de R$2
Os lanches e a batata podem ou não vir com maionese. Acréscimo de R$1
Desenhar as classes e criar uma função para verificar o preço do pedido

Exemplo 1:
Entrada: 1 hamburguer de carne com salada e 2 refrigerantes 
Saída: 30 

Example 2:
Entrada: 2 hamburguer de carne sem salada, 2 batatas fritas com maionese e 1 refrigerante
Sáida: 58

RESPOSTA: Criei 3 classes compra,item e compraTeste e usei POO


import java.util.ArrayList;

public class Compra {

	
	boolean podeMaionese;
	boolean podeSalada;
	String cliente;
	ArrayList<Item> itens = new ArrayList<Item>();
	
	double obtervalortotal() {
		double total = 0;
		
		for(Item item: itens) {
			total += item.quantidade * item.preco;
		}
		
		if(this.podeMaionese )
			total += 1;
		else if(this.podeSalada ) {
			total += 2;
		}
		
		return total;
	}

	public boolean isTemmaionese() {
		return podeMaionese;
	}

	public void setTemmaionese(boolean temmaionese) {
		this.podeMaionese = temmaionese;
	}

	public boolean isTemsalada() {
		return podeSalada;
	}

	public void setTemsalada(boolean temsalada) {
		this.podeSalada = temsalada;
	}

	public String getCliente() {
		return cliente;
	}

	public void setCliente(String cliente) {
		this.cliente = cliente;
	}

	public ArrayList<Item> getItens() {
		return itens;
	}

	public void setItens(ArrayList<Item> itens) {
		this.itens = itens;
	}
	
	public boolean verificarPermissaoMaionese() {
		
		boolean temlanche = false;
		boolean tembatata = false;
		
		for(Item item : this.itens) {
			if(item.getNome().contains("Lanche")) {
				temlanche = true;
			} else if (item.getNome().contains("Batata")) {
				tembatata = true;
				
			}
			
		}
		
		
		
		return temlanche && tembatata;
	}
	
public boolean verificarPermissaoSalada() {
		
		boolean temlanche = false;
		boolean naotembatata = false;
		
		for(Item item : this.itens) {
			if(item.getNome().contains("Lanche")) {
				temlanche = true;
			} else if (item.getNome().contains("Batata")) {
				naotembatata = true;
				
			}
			
		}
		
		
		
		return temlanche && naotembatata;
	}
	
}
_________________________________________________________________________________________________________



public class Item {
	
	String nome;
	int quantidade;
	double preco;
	
	
	Item(String nome, int quantidade, double preco) {
		this.nome = nome;
		this.quantidade = quantidade;
		this.preco = preco;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public int getQuantidade() {
		return quantidade;
	}

	public void setQuantidade(int quantidade) {
		this.quantidade = quantidade;
	}

	public double getPreco() {
		return preco;
	}

	public void setPreco(double preco) {
		this.preco = preco;
	}


}
______________________________________________________________________________________________________


public class CompraTeste {
	
	public static void main(String[] args) {
		
		Compra c1 = new Compra();
		c1.cliente = "João Pedro";
		c1.itens.add(new Item("Lanche de carne", 1, 20.00));
		//c1.itens.add(new Item("Lanche de frango", 1, 16.00));
		c1.itens.add(new Item("Batata frita", 1, 6.00));
		c1.itens.add(new Item("Refrigerante", 2, 4.00));
		c1.podeMaionese = c1.verificarPermissaoMaionese(); 
		
		
		
		Compra c2 = new Compra();
		c2.cliente = "Paulo Ricardo";
		
		c2.itens.add(new Item("Lanche de carne", 2, 20.00));
		//c2.itens.add(new Item("Lanche de frango", 1, 16.00));
		c2.itens.add(new Item("Batata frita", 2, 6.00));
		c2.itens.add(new Item("Refrigerante", 1, 4.00));
		c2.podeSalada = c2.verificarPermissaoSalada();
		
		System.out.println(c1.itens.size());
		System.out.println(c1.obtervalortotal());
		
		System.out.println(c2.itens.size());
		System.out.println(c2.obtervalortotal());
	}

}


Exercício 4
Corrigir o programa Palindromo_Com_Erro para que ele funcione conforme a descrição abaixo 
Dada uma string s, encontre a substring palíndrica mais longa em s. Não aceitar um s com tamanho maior que 100
Para finalizar é para digitar "fim".

Exemplo 1:
Entrada: "babad"
Saída: "bab"
Obs: "aba" também é válido

Example 2:
Entrada: "cbbd"
Sáida: "bb" 

Pode ser feito em Java(corrigir Palindromo_Com_Erro.java) ou C#(corrigir Palindromo_Com_Erro.cs)

RESPOSTA: Ao meu ver está tudo certo, testei e exibiu os resultados iguais o exemplo.



import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Palindromic {

	
	
	
	public static void main(String[] args) {
        try {
            boolean c = false;
            while (!c) {
                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
                System.out.print("Digite o palindrome inicial(fim para terminar): ");
                String s = br.readLine();
                if (s.length() < 100) {
                    if (s.equals("fim")) {
                        c = true;
                    } else {
                        System.out.println("Maior palíndrome é: " + a(s));
                    }
                } else {
                    System.out.print("A cadeia de caracteres precisa ter no máximo 100 elementos");
                }
            }
        } catch (Exception e) {

        }
    }

    public static String a(String s) {
        String d = "";
        int e = s.length() -1;
        for (int i = 0; i < e; i++) {
            for (int z = i + 2; z < e; z++) {
                if (z - i > d.length()) {
                    String p = s.substring(i, z);
                    if (b(p)) {
                        if (p.length() > d.length()) {
                            d = p;
                        }
                    }
                }
            }
        }
        return d;
    }

    public static Boolean b(String word) {
        char[] k = word.toCharArray();
        int l = k.length / 2;
        int z = k.length / 2;
        for (int i = 0; i < l; i++) {
            if (k[i] != k[z]) {
                return true;
            }
            z--;
        }
        return false;
    }
}




Exercício 5
Criar um programa para mostrar a sequência de Golomb. Dado um valor númerico n de entrada mostre os n primeiros valores da sequencia de Golomb

Em matemática, a sequência de Golomb, em homenagem a Solomon W. Golomb (mas também chamada sequência de Silverman), é uma sequência não-decrescente de números inteiros, onde a(n) a(n) é o número de vezes em que n ocorre na sequência, começando com a(1)=1, e com a propriedade de que, para n> 1, cada um a(n) é o menor número inteiro que faz com que seja possível satisfazer a condição. Por exemplo, a(1)=1 diz que uma só ocorre o valor 1 uma vez na sequência, de modo que a(2) não pode ser 1 também, e portanto deve ser de 2.
Os primeiros valores são: 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12 (sequência A001462 na OEIS).

a(1)=1;a(n+1)=1+a(n+1-a(-a(n)))
fonte: https://pt.wikipedia.org/wiki/Sequ%C3%AAncia_de_Golomb


Exemplo 1:
Entrada: 3
Saída: 1, 2, 2

Exemplo 2:
Entrada: 10
Saída: 1, 2, 2, 3, 3, 4, 4, 4, 5, 5

Pode ser feito em c# ou java

